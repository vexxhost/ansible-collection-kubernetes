# Copyright (c) 2022 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Bootstrap cluster
  ansible.builtin.include_tasks: bootstrap-cluster.yml

- name: Create folder for admin configuration
  ansible.builtin.file:
    path: /root/.kube
    state: directory
    owner: root
    group: root
    mode: "0750"

- name: Creating a symlink for admin configuration file
  ansible.builtin.file:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    state: link
    force: true

- name: Add bash autocomplete for kubectl
  ansible.builtin.lineinfile:
    path: /root/.bashrc
    line: "source <(kubectl completion bash)"
    insertbefore: EOF

# TODO(fitbeard): Move common system packages from all roles to dedicated role.
- name: Install PIP
  ansible.builtin.package:
    name: python3-pip

- name: Install Kubernetes python package
  ansible.builtin.pip:
    name: kubernetes

- name: Allow workload on control plane node
  kubernetes.core.k8s_taint:
    state: absent
    name: "{{ kubelet_hostname }}"
    taints:
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      - effect: NoSchedule
        key: node-role.kubernetes.io/master

- name: Retrieve the "kubeadm-config" ConfigMap
  run_once: true
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    name: kubeadm-config
    namespace: kube-system
  register: kubernetes_kubeadm_config

- name: Parse the ClusterConfiguration
  run_once: true
  ansible.builtin.set_fact:
    kubernetes_cluster_configuration: "{{ kubernetes_kubeadm_config.resources[0].data.ClusterConfiguration | from_yaml }}"

- name: Retrieve the current Kubernetes version
  run_once: true
  ansible.builtin.set_fact:
    kubernetes_cluster_version: "{{ kubernetes_cluster_configuration.kubernetesVersion | regex_replace('^v', '') }}"

# TODO: if we are jumping too many minor versions, error or start over somehow

- name: Start an upgrade
  run_once: true
  changed_when: true
  when: kubernetes_cluster_version != kubernetes_version
  ansible.builtin.command: kubeadm upgrade apply --yes v{{ kubernetes_version }}

- name: Check if the Kubernetes API services is up to date
  ansible.builtin.command:
    cmd: grep -q "v{{ kubernetes_version }}" /etc/kubernetes/manifests/kube-apiserver.yaml
  changed_when: false
  ignore_errors: true
  register: kube_apiserver_version_check

- name: Trigger an upgrade of the Kubernetes API services
  throttle: 1
  changed_when: true
  ansible.builtin.command: kubeadm upgrade node
  when: kube_apiserver_version_check is failed

- name: Set node selector for CoreDNS components
  run_once: true
  kubernetes.core.k8s:
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: coredns
        namespace: kube-system
      spec:
        template:
          spec:
            nodeSelector: "{{ kubernetes_coredns_node_selector }}"
