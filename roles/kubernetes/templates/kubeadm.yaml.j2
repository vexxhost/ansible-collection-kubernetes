---
apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: "{{ kubernetes_node_ip }}"
nodeRegistration:
  kubeletExtraArgs:
{% if kubernetes_allow_unsafe_swap %}
    fail-swap-on: "false"
{% endif %}
    cgroups-per-qos: "false"
    enforce-node-allocatable: ""
    node-ip: "{{ kubernetes_node_ip }}"
    container-runtime: "remote"
    container-runtime-endpoint: "{{ kubelet_cri_socket }}"
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: JoinConfiguration
nodeRegistration:
  kubeletExtraArgs:
{% if kubernetes_allow_unsafe_swap %}
    fail-swap-on: "false"
{% endif %}
    cgroups-per-qos: "false"
    enforce-node-allocatable: ""
    node-ip: "{{ kubernetes_node_ip }}"
    container-runtime: "remote"
    container-runtime-endpoint: "{{ kubelet_cri_socket }}"
{% if (kubernetes_bootstrap_node is not defined) or (kubernetes_bootstrap_node is defined and inventory_hostname != kubernetes_bootstrap_node) %}
discovery:
  bootstrapToken:
    token: "{{ kubernetes_kubeadm_token_create.stdout | trim }}"
    apiServerEndpoint: "{{ kubernetes_hostname }}:6443"
    caCertHashes: ["sha256:{{ kubernetes_kubeadm_certificate_info.public_key_fingerprints.sha256 | replace(':', '') }}"]
{% if inventory_hostname in groups[kubernetes_control_plane_group] %}
controlPlane:
  localAPIEndpoint:
    advertiseAddress: "{{ kubernetes_node_ip }}"
  certificateKey: {{ kubernetes_kubeadm_init_upload_certs.stdout_lines[-1] | trim }}
{% endif %}
{% endif %}
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
controlPlaneEndpoint: "{{ kubernetes_hostname }}:6443"
{% if kubernetes_image_repository not in ("registry.k8s.io", "k8s.gcr.io") %}
imageRepository: "{{ kubernetes_image_repository }}"
{% endif %}
apiServer:
  extraArgs:
    oidc-username-claim: email
{% if kubernetes_oidc_issuer_url is defined %}
    oidc-issuer-url: {{ kubernetes_oidc_issuer_url }}
    oidc-client-id: {{ kubernetes_oidc_client_id }}
{% endif %}
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
metricsBindAddress: 0.0.0.0
{% if kubernetes_non_init_namespace %}
conntrack:
  maxPerCore: 0
{% endif %}
